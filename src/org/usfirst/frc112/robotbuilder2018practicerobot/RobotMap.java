// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc112.robotbuilder2018practicerobot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveTrainRightMotorFrontTalonSRX1;
    public static WPI_VictorSPX driveTrainRightMotorMiddleVictorSPX20;
    public static WPI_VictorSPX driveTrainRightMotorRearVictorSPX21;
    public static SpeedControllerGroup driveTrainRightDriveGroup;
    public static WPI_TalonSRX driveTrainLeftMotorFrontTalonSRX2;
    public static WPI_VictorSPX driveTrainLeftMotorMiddleVictorSPX22;
    public static WPI_VictorSPX driveTrainLeftMotorRearVictorSPX23;
    public static SpeedControllerGroup driveTrainLeftDriveGroup;
    public static DifferentialDrive driveTrainDifferentialDrive;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static Solenoid shifterSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainRightMotorFrontTalonSRX1 = new WPI_TalonSRX(1);
        
        
        driveTrainRightMotorMiddleVictorSPX20 = new WPI_VictorSPX(20);
        
        
        driveTrainRightMotorRearVictorSPX21 = new WPI_VictorSPX(21);
        
        
        driveTrainRightDriveGroup = new SpeedControllerGroup(driveTrainRightMotorFrontTalonSRX1, driveTrainRightMotorMiddleVictorSPX20 , driveTrainRightMotorRearVictorSPX21 );
        LiveWindow.addActuator("DriveTrain", "RightDriveGroup", driveTrainRightDriveGroup);
        
        driveTrainLeftMotorFrontTalonSRX2 = new WPI_TalonSRX(2);
        
        
        driveTrainLeftMotorMiddleVictorSPX22 = new WPI_VictorSPX(22);
        
        
        driveTrainLeftMotorRearVictorSPX23 = new WPI_VictorSPX(23);
        
        
        driveTrainLeftDriveGroup = new SpeedControllerGroup(driveTrainLeftMotorFrontTalonSRX2, driveTrainLeftMotorMiddleVictorSPX22 , driveTrainLeftMotorRearVictorSPX23 );
        LiveWindow.addActuator("DriveTrain", "LeftDriveGroup", driveTrainLeftDriveGroup);
        
        driveTrainDifferentialDrive = new DifferentialDrive(driveTrainRightDriveGroup, driveTrainLeftDriveGroup);
        LiveWindow.addActuator("DriveTrain", "Differential Drive", driveTrainDifferentialDrive);
        driveTrainDifferentialDrive.setSafetyEnabled(true);
        driveTrainDifferentialDrive.setExpiration(0.1);
        driveTrainDifferentialDrive.setMaxOutput(1.0);

        driveTrainLeftEncoder = new Encoder(2, 3, false, EncodingType.k2X);
        LiveWindow.addSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(0.098175);
        driveTrainLeftEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        driveTrainRightEncoder = new Encoder(4, 5, false, EncodingType.k2X);
        LiveWindow.addSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(0.098175);
        driveTrainRightEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        shifterSolenoid = new Solenoid(0, 0);
        LiveWindow.addActuator("Shifter", "Solenoid", shifterSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
